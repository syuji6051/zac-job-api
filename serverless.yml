service: ZacJobApi

provider:
  name: aws
  runtime: 'nodejs14.x'
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  deploymentBucket: 
    name: serverless-deploy-bucket
  iam:
    role: 'arn:aws:iam::#{AWS::AccountId}:role/zac-job-basic-role-${opt:stage}'
  timeout: 28
  memorySize: 128
  environment:
    SECRET_ID: zac-job-dev
    STAGE: ${opt:stage, 'dev'}
  httpApi:
    cors: true
    authorizers:
      cognitoJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.#{AWS::Region}.amazonaws.com/ap-northeast-1_Jp6VfWMAA
        audience:
          - 51llci74rerc7evsa34d1p68fp
plugins:
  - serverless-pseudo-parameters

functions:
  UserCreate:
    name: zac-job-api-user-create-${opt:stage}
    handler: dist/handlers/users.create
    events:
      - http:
          path: /users/create
          method: post
  PutZacLogin:
    name: zac-job-api-put-zac-login-${opt:stage}
    handler: dist/handlers/users.putZacLogin
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-cognito-write-role-${opt:stage}
    events:
      - http:
          path: /users/zac/login
          method: put
          cors: true 
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/ap-northeast-1_Jp6VfWMAA
  PutObcLogin:
    name: zac-job-api-put-obc-login-${opt:stage}
    handler: dist/handlers/users.putObcLogin
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-cognito-write-role-${opt:stage}
    events:
      - http:
          path: /users/obc/login
          method: put
          cors: true 
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/ap-northeast-1_Jp6VfWMAA
  WorkListSync:
    name: zac-job-api-work-list-sync-${opt:stage}
    handler: dist/handlers/works.workSync
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-work-results-table-write-role-${opt:stage}
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /works/sync
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
          async: true
  WorkList:
    name: zac-job-api-work-list-${opt:stage}
    handler: dist/handlers/works.workList
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-work-results-table-write-role-${opt:stage}
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /works
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
  WorkClockIn:
    name: zac-job-api-work-clock-in-${opt:stage}
    handler: dist/handlers/works.clockIn
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /works/clock-in
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
  WorkClockOut:
    name: zac-job-api-work-clock-out-${opt:stage}
    handler: dist/handlers/works.clockOut
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /works/clock-out
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
  WorkGoOut:
    name: zac-job-api-work-go-out-${opt:stage}
    handler: dist/handlers/works.goOut
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /works/go-out
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
  WorkGoReturn:
    name: zac-job-api-work-go-return-${opt:stage}
    handler: dist/handlers/works.goReturn
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /works/go-return
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
  ZacWork:
    name: zac-job-api-zac-work-${opt:stage}
    handler: dist/handlers/zac.registerWorks
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-work-results-table-write-role-${opt:stage}
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /zac/works
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
