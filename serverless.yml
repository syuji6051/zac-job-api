service:
  name: express-api

provider:
  name: aws
  # runtime: 'nodejs12.x'
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  deploymentBucket: 
    name: serverless-deploy-bucket
  role: 'arn:aws:iam::#{AWS::AccountId}:role/lambda-basic-role-${opt:stage}'
  timeout: 29
  memorySize: 128
  environment:
    SECRET_ID: zac-job-dev
  httpApi:
    authorizers:
      cognitoJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.#{AWS::Region}.amazonaws.com/ap-northeast-1_nsYbr83YQ
        audience:
          - 4s375jt92lgobq1keg4ip8r3fm
  ecr:
    images:
      zac-job-api:
        uri: 105785188161.dkr.ecr.ap-northeast-1.amazonaws.com/zac-job-api@sha256:${env:ECR_DIGEST}
plugins:
  - serverless-pseudo-parameters

functions:
  user-create:
    name: ${self:service.name}-user-create-${opt:stage}
    # handler: src/handlers/users.create
    image:
      name: zac-job-api
      command:
        - dist/handlers/users.create
      entryPoint:
        - /lambda-entrypoint.sh
    events:
      - http:
          path: /user/create
          method: post
          cors: true
  put-zac-login:
    name: ${self:service.name}-put-zac-login-${opt:stage}
    # handler: src/handlers/users.putZacLogin
    image:
      name: zac-job-api
      command:
        - dist/handlers/users.putZacLogin
      entryPoint:
        - /lambda-entrypoint.sh
    role: arn:aws:iam::#{AWS::AccountId}:role/lambda-cognito-write-role-${opt:stage}
    events:
      - http:
          path: /user/zac/login
          method: put
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/ap-northeast-1_Jp6VfWMAA
  put-obc-login:
    name: ${self:service.name}-put-obc-login-${opt:stage}
    # handler: src/handlers/users.putObcLogin
    image:
      name: zac-job-api
      command:
        - dist/handlers/users.putObcLogin
      entryPoint:
        - /lambda-entrypoint.sh
    role: arn:aws:iam::#{AWS::AccountId}:role/lambda-cognito-write-role-${opt:stage}
    events:
      - http:
          path: /user/obc/login
          method: put
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/ap-northeast-1_Jp6VfWMAA
  user-zac-work:
    name: ${self:service.name}-user-zac-work-${opt:stage}
    # handler: src/handlers/users.postZacRegister
    image:
      name: zac-job-api
      command:
        - dist/handlers/users.postZacRegister
      entryPoint:
        - /lambda-entrypoint.sh
    role: arn:aws:iam::#{AWS::AccountId}:role/lambda-cognito-write-role-${opt:stage}
    events:
      - http:
          path: /user/zac/work
          method: post
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/ap-northeast-1_Jp6VfWMAA
  work-list-sync:
    name: ${self:service.name}-work-list-sync-${opt:stage}
    # handler: src/handlers/works.workSync
    image:
      name: zac-job-api
      command:
        - dist/handlers/works.workSync
      entryPoint:
        - /lambda-entrypoint.sh
    events:
      - httpApi:
          path: /work/sync
          method: post
          cors: true
          authorizer:
            name: cognitoJwtAuthorizer
          async: true
  work-clock-in:
    name: ${self:service.name}-work-clock-in-${opt:stage}
    image:
      name: zac-job-api
      command:
        - dist/handlers/works.clockIn
      entryPoint:
        - /lambda-entrypoint.sh
    # handler: src/handlers/works.clockIn
    events:
      - httpApi:
          path: /work/clock-in
          method: post
          cors: true
          authorizer:
            name: cognitoJwtAuthorizer
  work-clock-out:
    name: ${self:service.name}-work-clock-out-${opt:stage}
    # handler: src/handlers/works.clockOut
    image:
      name: zac-job-api
      command:
        - dist/handlers/works.clockOut
      entryPoint:
        - /lambda-entrypoint.sh
    events:
      - httpApi:
          path: /work/clock-out
          method: post
          cors: true
          authorizer:
            name: cognitoJwtAuthorizer
  work-go-out:
    name: ${self:service.name}-work-go-out-${opt:stage}
    # handler: src/handlers/works.goOut
    image:
      name: zac-job-api
      command:
        - dist/handlers/works.goOut
      entryPoint:
        - /lambda-entrypoint.sh
    events:
      - httpApi:
          path: /work/go-out
          method: post
          cors: true
          authorizer:
            name: cognitoJwtAuthorizer
  work-go-return:
    name: ${self:service.name}-work-go-return-${opt:stage}
    # handler: src/handlers/works.goReturn
    image:
      name: zac-job-api
      command:
        - dist/handlers/works.goReturn
      entryPoint:
        - /lambda-entrypoint.sh
    events:
      - httpApi:
          path: /work/go-return
          method: post
          cors: true
          authorizer:
            name: cognitoJwtAuthorizer
