service: ZacJobApi

provider:
  name: aws
  runtime: 'nodejs14.x'
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  deploymentBucket: 
    name: serverless-deploy-bucket
  iam:
    role: 'arn:aws:iam::#{AWS::AccountId}:role/zac-job-basic-role-${opt:stage}'
  timeout: 28
  memorySize: 128
  environment:
    SECRET_ID: zac-job-dev
    STAGE: ${opt:stage, 'dev'}
    PUPPETEER_API_SNS_TOPIC: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:zac-api-bot-message-${opt:stage}
    PUPPETEER_PUNCH_WORK_SNS_TOPIC: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:puppeteer-punch-work-${opt:stage}
  httpApi:
    cors: true
    authorizers:
      cognitoJwtAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.#{AWS::Region}.amazonaws.com/ap-northeast-1_9grJYLXFS
        audience:
          - 6l0isreofv92k8g27t274l37ft
plugins:
  - serverless-pseudo-parameters

functions:
  UserCreate:
    name: zac-job-api-user-create-${opt:stage}
    handler: dist/handlers/users.create
    events:
      - http:
          path: /users/create
          method: post
  GetWorkCodeList:
    name: zac-job-api-get-work-code-list-${opt:stage}
    handler: dist/handlers/zac.getWorkCodeList
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /zac/works/code-list
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
  SetWorkCodeList:
    name: zac-job-api-set-work-code-list-${opt:stage}
    handler: dist/handlers/zac.setWorkCodeList
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /zac/works/code-list
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
  WorkListSync:
    name: zac-job-api-work-list-sync-${opt:stage}
    handler: dist/handlers/works.workSync
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-work-results-table-write-role-${opt:stage}
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /works/sync
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
  WorkList:
    name: zac-job-api-work-list-${opt:stage}
    handler: dist/handlers/works.workList
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-work-results-table-write-role-${opt:stage}
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /works
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
  PunchWork:
    name: zac-job-api-punch-work-${opt:stage}
    handler: dist/handlers/works.punchWork
    events:
      - httpApi:
          path: /works/punch
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
  ZacWork:
    name: zac-job-api-zac-work-${opt:stage}
    handler: dist/handlers/zac.registerWorks
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-work-table-read-write-role-${opt:stage}
    vpc:
      subnetIds: subnet-09e40f8637f9139f0
      securityGroupIds: sg-0fcd4bf6bd4373a7d
    events:
      - httpApi:
          path: /zac/works
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
  AdminUsersList:
    name: zac-job-api-admin-users-list-${opt:stage}
    handler: dist/handlers/users.getUsersList
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-admin-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /admin/users/list
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
  AdminUserInfo:
    name: zac-job-api-admin-get-user-info-${opt:stage}
    handler: dist/handlers/users.getIamUserInfo
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /admin/users/user-info
          method: get
          authorizer:
            type: aws_iam
  GetUserInfo:
    name: zac-job-api-get-user-info-${opt:stage}
    handler: dist/handlers/users.getUserInfo
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /users/user-info
          method: get
          authorizer:
            name: cognitoJwtAuthorizer
  PutZacInfo:
    name: zac-job-api-put-zac-info-${opt:stage}
    handler: dist/handlers/users.putZacInfo
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /users/user-info/zac
          method: put
          authorizer:
            name: cognitoJwtAuthorizer
  PutObcInfo:
    name: zac-job-api-put-obc-info-${opt:stage}
    handler: dist/handlers/users.putObcInfo
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /users/user-info/obc
          method: put
          authorizer:
            name: cognitoJwtAuthorizer
  SlackAuth:
    name: zac-job-api-post-slack-auth-${opt:stage}
    handler: dist/handlers/slack.setUserAttribute
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /slack/auth
          method: post
          authorizer:
            name: cognitoJwtAuthorizer
  SlackActionEvents:
    name: zac-job-api-post-slack-action-events-${opt:stage}
    handler: dist/handlers/slack.actionEvents
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - httpApi:
          path: /slack/action-events
          method: post
  BotMessage:
    name: zac-job-api-post-slack-bot-message-${opt:stage}
    handler: dist/handlers/slack.botMessage
    role: arn:aws:iam::#{AWS::AccountId}:role/zac-job-lambda-role-${opt:stage}
    events:
      - sns:
          topicName: zac-api-bot-message-${self:provider.stage}
          displayName: zac-api-bot-message-${self:provider.stage}
